{"version":3,"sources":["../../src/builder/spreadsheet.js"],"names":["makeSpreadsheetPresenter","presenter","Spreadsheet_","props","onAfterChange","changes","source","arrayDataQuery","setCellValues","sheet","rangeRef","fromA1Ref","upperLeft","get","tabId","upperLeftRow","upperLeftCol","map","rowIdx","colIdx","_","newVal","cellRef","cell","getCell","format","fromUserEnteredValue","mergeCells","config","merges","a1","filter","range","startRow","getIn","startCol","endRow","endCol","row","col","rowspan","colspan","toJS","getCellConfig","userEditableRanges","isUserEditable","some","indexOf","rangeContains","ref","readOnly","renderer","cellRenderer","instance","td","prop","value","cellProperties","renderers","TextRenderer","call","formatting","f","find","forEach","key","style","state","id","v4","arrayData","length","schema"],"mappings":"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","file":"spreadsheet.js","sourcesContent":["import React, { Component } from 'react';\nimport HotTable from 'react-handsontable';\nimport Handsontable from 'handsontable';\nimport { Map, List, fromJS } from 'immutable';\nimport uuid from 'uuid';\nimport { CellRef, CellRefRange } from 'sheety-model';\n\nexport default function makeSpreadsheetPresenter(presenter) {\n  class Spreadsheet_ extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: `sheet-${uuid.v4()}`\n      };\n    }\n\n    render() {\n      const { arrayData, config } = this.props;\n      return (\n        <HotTable\n          root={this.state.id}\n          readOnly={true}\n          data={!!arrayData && arrayData.length\n                  ? arrayData\n                  : [[]]}\n          colHeaders={config.get('showColumnHeaders')}\n          rowHeaders={config.get('showRowHeaders')}\n          autoRowSize={true}\n          stretchH=\"all\"\n          preventOverflow=\"horizontal\"\n          mergeCells={this.mergeCells()}\n          afterChange={this.onAfterChange}\n          cells={this.getCellConfig} />\n      );\n    }\n\n    onAfterChange = (changes, source) => {\n      if ( source === 'loadData' ) {\n        return;\n      }\n\n      const { arrayDataQuery, setCellValues, sheet } = this.props;\n      const rangeRef = CellRefRange.fromA1Ref(arrayDataQuery);\n      const upperLeft = rangeRef.get('start');\n      const tabId = upperLeft.get('tabId');\n      const upperLeftRow = upperLeft.get('rowIdx');\n      const upperLeftCol = upperLeft.get('colIdx');\n      setCellValues(\n        new Map(\n          new List(changes).map(([rowIdx, colIdx, _, newVal]) => {\n            const cellRef = new CellRef({\n              tabId,\n              rowIdx: upperLeftRow + rowIdx,\n              colIdx: upperLeftCol + colIdx\n            });\n            const cell = sheet.getCell(cellRef);\n            const format = cell && cell.get('format');\n            return [\n              cellRef,\n              format ? format.fromUserEnteredValue(newVal) : newVal\n            ];\n          })\n        )\n      );\n    };\n\n    mergeCells = () => {\n      const { config } = this.props;\n      const merges = config && config.get('merges');\n      return (merges || new List())\n        .map(a1 => CellRefRange.fromA1Ref(a1))\n        .filter(range => !!range)\n        .map(range => {\n          const startRow = range.getIn(['start', 'rowIdx']);\n          const startCol = range.getIn(['start', 'colIdx']);\n          const endRow = range.getIn(['end', 'rowIdx']);\n          const endCol = range.getIn(['end', 'colIdx']);\n          return {\n            row: startRow,\n            col: startCol,\n            rowspan: endRow - startRow + 1,\n            colspan: endCol - startCol + 1\n          };\n        }).toJS();\n    };\n\n    getCellConfig = (row, col) => {\n      const { config } = this.props;\n      const userEditableRanges = config ? config.get('userEditableRanges', new List()) : new List();\n      const isUserEditable = userEditableRanges.filter(a1 => !!a1).some(a1 => {\n        if ( a1.indexOf(':') > 0 ) {\n          const range = CellRefRange.fromA1Ref(a1);\n          return !!range && rangeContains(range, row, col);\n        }\n\n        const ref = CellRef.fromA1Ref(a1);\n        return !!ref && ref.get('rowIdx') === row && ref.get('colIdx') === col;\n      });\n\n      return {\n        readOnly: !isUserEditable,\n        renderer: this.cellRenderer\n      };\n    };\n\n    cellRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n      Handsontable.renderers.TextRenderer.call(instance, instance, td, row, col, prop, value, cellProperties);\n\n      const { config } = this.props;\n      const formatting = config && config.get('formatting');\n      const format = formatting && formatting.filter(f => !!f).find(format => {\n        const range = CellRefRange.fromA1Ref(format.get('range'));\n        return !!range && rangeContains(range, row, col);\n      });\n\n      if ( format && !!format.get('style') ) {\n        format.get('style').forEach((value, key) => {\n          td.style[key] = value;\n        });\n      }\n    }\n  }\n\n  function rangeContains(range, row, col) {\n    return range.getIn(['start', 'rowIdx']) <= row\n        && range.getIn(['end', 'rowIdx']) >= row\n        && range.getIn(['start', 'colIdx']) <= col\n        && range.getIn(['end', 'colIdx']) >= col;\n  }\n\n  return presenter({\n    schema: fromJS({\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"$id\": \"http://sheetyapp.com/schemas/core-presenters/spreadsheet.json\",\n      \"title\": \"Spreadsheet\",\n      \"description\": \"Spreadsheet view of a portion of the underlying spreadsheet that allows restricted editing.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Identifier\",\n          \"description\": \"A unique identifier for this presenter.  Used for analytics events.\",\n          \"type\": \"string\",\n          \"default\": \"\"\n        },\n        \"type\": {\n          \"const\": \"spreadsheet\",\n          \"default\": \"spreadsheet\"\n        },\n        \"arrayData\": {\n          \"title\": \"Array data\",\n          \"description\": \"An A1 reference to the data to fill the spreadsheet with.\",\n          \"default\": [],\n          \"$ref\": \"http://sheetyapp.com/schemas/core-presenters/configurers/cell-range.json\"\n        },\n        \"config\": {\n          \"title\": \"Configuration\",\n          \"description\": \"Pre-specified configuration\",\n          \"type\": \"object\",\n          \"default\": {},\n          \"properties\": {\n            \"formatting\": {\n              \"title\": \"Formatting\",\n              \"description\": \"List of A1 range references that are relative to the upper-left corner of this view of the spreadsheet and the corresponding style properties to apply to the range.\",\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"items\": {\n                \"title\": \"Format\",\n                \"type\": \"object\",\n                \"linkable\": false,\n                \"properties\": {\n                  \"range\": {\n                    \"title\": \"Range reference\",\n                    \"description\": \"A1 range reference (relative to upper-left of array data)\",\n                    \"type\": \"string\",\n                    \"linkable\": false\n                  },\n                  \"style\": {\n                    \"title\": \"Style\",\n                    \"description\": \"The style for the range of cells\",\n                    \"type\": \"object\",\n                    \"linkable\": false,\n                    \"properties\": {\n                      \"backgroundColor\": {\n                        \"title\": \"Background color\",\n                        \"type\": \"string\",\n                        \"linkable\": false\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            \"merges\": {\n              \"title\": \"Merges\",\n              \"description\": \"List of A1 ranges to merge.\",\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"items\": {\n                \"title\": \"A1 range\",\n                \"description\": \"A1 range to merge (e.g. A1:B7)\",\n                \"type\": \"string\",\n                \"linkable\": false\n              }\n            },\n            \"showColumnHeaders\": {\n              \"title\": \"Show Column Headers\",\n              \"description\": \"Should we show column headers (e.g. A, B, C, ...)?\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"linkable\": false\n            },\n            \"showRowHeaders\": {\n              \"title\": \"Show Row Headers\",\n              \"description\": \"Should we show row headers (e.g. 1, 2, 3, ...)?\",\n              \"default\": false,\n              \"type\": \"boolean\",\n              \"linkable\": false\n            },\n            \"userEditableRanges\": {\n              \"title\": \"User editable ranges\",\n              \"description\": \"Which ranges are users able to edit\",\n              \"default\": [],\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"items\": {\n                \"title\": \"User editable range\",\n                \"description\": \"A1 range reference (relative to upper-left of array data)\",\n                \"type\": \"string\",\n                \"default\": \"\",\n                \"linkable\": false\n              }\n            }\n          }\n        }\n      }\n    })\n  })(Spreadsheet_);\n}\n"]}