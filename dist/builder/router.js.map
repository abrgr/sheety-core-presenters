{"version":3,"sources":["../../src/builder/router.js"],"names":["makeRouterPresenter","presenter","RouterPresenter","props","onSetRoute","path","onUpdate","config","onSelectPresenterForEditing","route","selectedRoute","value","haveRoute","newRoutes","get","push","concat","size","setState","partialRoute","onSetParitalRoute","some","r","state","selectedPath","isEditing","renderPresenter","routes","selectedIdx","findIndex","routeDataSource","map","label","routeConfig","toJS","isNew","getIn","presenterPath","fuzzyFilter","text","textAlign","evt","stopPropagation","schema"],"mappings":"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","file":"router.js","sourcesContent":["import React, { Component } from 'react';\nimport { fromJS, Map } from 'immutable';\nimport AutoComplete from 'material-ui/AutoComplete';\nimport EditPresenterIcon from 'material-ui/svg-icons/editor/border-inner';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport equalPaths from './equal-paths';\n\nexport default function makeRouterPresenter(presenter) {\n  class RouterPresenter extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        selectedRoute: null,\n        partialRoute: null\n      };\n    }\n\n    render() {\n      const {\n        path,\n        selectedPath,\n        isEditing,\n        config,\n        renderPresenter,\n        onSelectPresenterForEditing\n      } = this.props;\n      const routes = config.get('routes');\n\n      const { selectedRoute, partialRoute } = this.state;\n      const selectedIdx = routes.findIndex(r => r.get('path') === selectedRoute);\n\n      const newRoutes = !partialRoute || this.haveRoute(partialRoute)\n                      ? []\n                      : [partialRoute];\n\n      const routeDataSource = routes.map(routeConfig => ({\n        label: routeConfig.get('path'),\n        value: routeConfig.get('path')\n      })).toJS().concat(\n        newRoutes.map(r => ({\n          label: `${r} (New)`,\n          value: r,\n          isNew: true\n        }))\n      );\n\n      const presenter = routes.getIn([selectedIdx, 'presenter']);\n      const presenterPath = ['config', 'routes', selectedIdx, 'presenter'];\n\n      return (\n        <div>\n          <AutoComplete\n            fullWidth\n            hintText=\"/product/:name\"\n            floatingLabelText=\"URL Path\"\n            onNewRequest={this.onSetRoute}\n            onUpdateInput={this.onSetParitalRoute}\n            searchText={partialRoute}\n            filter={AutoComplete.fuzzyFilter}\n            dataSourceConfig={{\n              text: 'label',\n              value: 'value'\n            }}\n            dataSource={routeDataSource} />\n          {/* Render the presenter if we have one set or if we are editing it */\n           !!presenter || (!!selectedPath && equalPaths(path.concat(presenterPath), selectedPath))\n            ? (\n              renderPresenter(presenterPath, presenter)\n            ) : (\n              <div\n                style={{\n                  textAlign: 'center'\n                }}>\n                <FloatingActionButton\n                  disabled={!isEditing}\n                  onClick={(evt) => {\n                    evt.stopPropagation();\n                    onSelectPresenterForEditing(path.concat(presenterPath));\n                  }}>\n                  <EditPresenterIcon />\n                </FloatingActionButton>\n              </div>\n            )}\n        </div>\n      );\n    }\n\n    onSetRoute = selectedRoute => {\n      const { path, onUpdate, config, onSelectPresenterForEditing } = this.props;\n\n      const route = typeof selectedRoute === 'string'\n                  ? selectedRoute\n                  : selectedRoute.value;\n\n      if ( !this.haveRoute(route) ) {\n        const newRoutes = config.get('routes').push(new Map({\n          path: route,\n          presenter: null\n        }));\n\n        onUpdate(\n          path.concat(['config', 'routes']),\n          newRoutes\n        );\n\n        onSelectPresenterForEditing(path.concat(['config', 'routes', newRoutes.size - 1, 'presenter']));\n      }\n\n      this.setState({\n        selectedRoute: route,\n        partialRoute: route\n      });\n    };\n\n    onSetParitalRoute = partialRoute => {\n      this.setState({\n        partialRoute\n      });\n    };\n\n    haveRoute = route => (\n      this.props.config.get('routes').some(r => (\n        r.get('path') === route\n      ))\n    );\n  }\n\n  return presenter({\n    schema: fromJS({\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"$id\": \"http://sheetyapp.com/schemas/core-presenters/router.json\",\n      \"title\": \"Router\",\n      \"description\": \"Defines url routes and the presenters to render when the user navigates to those urls directly or by clicking a link.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Identifier\",\n          \"description\": \"A unique identifier for this presenter.  Used for analytics events.\",\n          \"type\": \"string\",\n          \"default\": \"\"\n        },\n        \"type\": {\n          \"const\": \"router\",\n          \"default\": \"router\"\n        },\n        \"config\": {\n          \"title\": \"Configuration\",\n          \"description\": \"Pre-specified configuration\",\n          \"type\": \"object\",\n          \"default\": {},\n          \"properties\": {\n            \"routes\": {\n              \"title\": \"Routes\",\n              \"description\": \"A list of url parts and the presenter we should show when the user navigates to that url.\",\n              \"default\": [],\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"internallyConfigured\": true,\n              \"items\": {\n                \"title\": \"Route\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"path\": {\n                    \"title\": \"Path\",\n                    \"description\": \"The path for this route (the thing you see in the address bar).  You can use /path/{'My Tab'!A1}/{'My Tab'!B2} so that, if the user navigates to /path/something/else, 'something' is written to cell A1 in tab, My Tab, and 'else' is writte to cell B2 in tab, My Tab.\",\n                    \"type\": \"string\",\n                    \"linkable\": false\n                  },\n                  \"presenter\": {\n                    \"title\": \"Presenter\",\n                    \"description\": \"Presenter to show at this url.\",\n                    \"$ref\": \"http://sheetyapp.com/schemas/core-presenters/configurers/presenter.json\",\n                    \"linkable\": false\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n  })(RouterPresenter);\n}\n"]}