{"version":3,"sources":["../../src/builder/input.js"],"names":["makeInputPresenter","presenter","InputPresenter","mapData","mapDataQuery","setCellValues","value","get","inputType","valueCell","evt","cellRef","CellRef","fromA1Ref","cell","sheet","getCell","format","Map","of","fromUserEnteredValue","target","newVal","schema"],"mappings":";;;;;kBAGwBA,kB;;AAHxB;;;;AACA;;;;AAEe,SAASA,kBAAT,CAA4BC,SAA5B,EAAuC;AACpD,MAAMC,iBAAiB,SAAjBA,cAAiB,OAA8C;AAAA,QAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,QAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;;AACnE,QAAMC,QAAQH,QAAQI,GAAR,CAAY,OAAZ,CAAd;AACA,QAAMC,YAAYL,QAAQI,GAAR,CAAY,WAAZ,CAAlB;AACA,QAAME,YAAYL,aAAaG,GAAb,CAAiB,OAAjB,CAAlB;;AAEA,WACE;AACE,gBAAU,kBAACG,GAAD,EAAS;AACjB,YAAMC,UAAUC,QAAQC,SAAR,CAAkBJ,SAAlB,CAAhB;AACA,YAAMK,OAAOC,MAAMC,OAAN,CAAcL,OAAd,CAAb;AACA,YAAMM,SAASH,QAAQA,KAAKP,GAAL,CAAS,QAAT,CAAvB;AACAF,sBAAc,IAAIa,GAAJ,CAAQ,CACpB,CACEN,QAAQO,EAAR,CAAWV,SAAX,CADF,EAEEQ,SAASA,OAAOG,oBAAP,CAA4BV,IAAIW,MAAJ,CAAWf,KAAvC,CAAT,GAAyDgB,MAF3D,CADoB,CAAR,CAAd;AAMD,OAXH;AAYE,aAAOhB,KAZT;AAaE,YAAME,SAbR,GADF;AAgBD,GArBD;;AAuBA,SAAOP,UAAU;AACfsB,YAAQ,uBAAO;AACb,iBAAW,gCADE;AAEb,aAAO,yDAFM;AAGb,eAAS,OAHI;AAIb,qBAAe,sHAJF;AAKb,cAAQ,QALK;AAMb,oBAAc;AACZ,cAAM;AACJ,mBAAS,YADL;AAEJ,yBAAe,qEAFX;AAGJ,kBAAQ,QAHJ;AAIJ,qBAAW;AAJP,SADM;AAOZ,gBAAQ;AACN,mBAAS,OADH;AAEN,qBAAW;AAFL,SAPI;AAWZ,mBAAW;AACT,mBAAS,SADA;AAET,yBAAe,yDAFN;AAGT,kBAAQ,QAHC;AAIT,qBAAW,EAJF;AAKT,wBAAc;AACZ,qBAAS;AACP,uBAAS,OADF;AAEP,6BAAe,0CAFR;AAGP,yBAAW,EAHJ;AAIP,sBAAQ;AAJD,aADG;AAOZ,yBAAa;AACX,uBAAS,YADE;AAEX,6BAAe,8BAFJ;AAGX,yBAAW,MAHA;AAIX,sBAAQ,QAJG;AAKX,sBAAQ,CAAC,MAAD,EAAS,UAAT,EAAqB,MAArB,EAA6B,OAA7B,EAAsC,gBAAtC,EAAwD,OAAxD,EAAiE,QAAjE,EAA2E,KAA3E,EAAkF,MAAlF,EAA0F,KAA1F;AALG;AAPD;AALL;AAXC;AAND,KAAP;AADO,GAAV,EAyCJrB,cAzCI,CAAP;AA0CD","file":"input.js","sourcesContent":["import React from 'react';\nimport { fromJS } from 'immutable';\n\nexport default function makeInputPresenter(presenter) {\n  const InputPresenter = ({ mapData, mapDataQuery, setCellValues }) => {\n    const value = mapData.get('value');\n    const inputType = mapData.get('inputType');\n    const valueCell = mapDataQuery.get('value');\n\n    return (\n      <input\n        onChange={(evt) => {\n          const cellRef = CellRef.fromA1Ref(valueCell)\n          const cell = sheet.getCell(cellRef);\n          const format = cell && cell.get('format');\n          setCellValues(new Map([\n            [\n              CellRef.of(valueCell),\n              format ? format.fromUserEnteredValue(evt.target.value) : newVal\n            ]\n          ]))\n        }}\n        value={value}\n        type={inputType} />\n    );\n  };\n\n  return presenter({\n    schema: fromJS({\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"$id\": \"http://sheetyapp.com/schemas/core-presenters/input.json\",\n      \"title\": \"Input\",\n      \"description\": \"The Input Presenter allows you to show users an input box with a value that is synced to a cell in your spreadsheet.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Identifier\",\n          \"description\": \"A unique identifier for this presenter.  Used for analytics events.\",\n          \"type\": \"string\",\n          \"default\": \"\"\n        },\n        \"type\": {\n          \"const\": \"input\",\n          \"default\": \"input\"\n        },\n        \"mapData\": {\n          \"title\": \"Options\",\n          \"description\": \"Formulas that will be evaluated against the spreadsheet\",\n          \"type\": \"object\",\n          \"default\": {},\n          \"properties\": {\n            \"value\": {\n              \"title\": \"Value\",\n              \"description\": \"The cell to read and write the value to.\",\n              \"default\": \"\",\n              \"$ref\": \"http://sheetyapp.com/schemas/core-presenters/configurers/formula.json\"\n            },\n            \"inputType\": {\n              \"title\": \"Input Type\",\n              \"description\": \"The type of input to provide\",\n              \"default\": \"text\",\n              \"type\": \"string\",\n              \"enum\": [\"text\", \"password\", \"date\", \"color\", \"datetime-local\", \"email\", \"number\", \"tel\", \"time\", \"url\"]\n            }\n          }\n        }\n      }\n    })\n  })(InputPresenter);\n}\n"]}