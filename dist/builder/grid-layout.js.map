{"version":3,"sources":["../../src/builder/grid-layout.js"],"names":["makeGridPresenter","HorizontalResizer","props","onStartDrag","setState","initialX","evt","nativeEvent","clientX","pxPerWidthUnit","target","parentElement","clientWidth","width","onDrag","state","x","offset","Math","abs","side","canExpandLeft","canExpandRight","roundedX","round","onResize","onEndDrag","isResizing","pos","right","left","position","top","bottom","cursor","height","backgroundColor","opacity","zIndex","Cell","movementX","onAdjustWidth","cell","sign","isHovered","selectedPath","relativePath","path","isEditing","renderPresenter","onRemove","onSelectPresenterForEditing","cellPresenter","get","shouldRenderPresenter","background","paddingLeft","paddingRight","bind","transition","minWidth","minHeight","padding","lineHeight","stopPropagation","presenter","GridPresenter","config","onUpdate","rows","map","row","rowIdx","rowPath","totalWidth","reduce","sum","marginTop","marginBottom","cellIdx","presenterPath","concat","getIn","size","change","otherCellIdx","nextRow","updateIn","max","w","nextTotalWidth","delete","pointerEvents","push","schema"],"mappings":"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","file":"grid-layout.js","sourcesContent":["import React, { Component } from 'react';\nimport { fromJS, Map, List } from 'immutable';\nimport FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport EditPresenterIcon from 'material-ui/svg-icons/editor/border-inner';\nimport equalPaths from './equal-paths';\n\nimport 'bootstrap/dist/css/bootstrap-grid.css';\nimport './grid-layout.css';\n\nclass HorizontalResizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialX: null,\n      pxPerWidthUnit: null\n    };\n  }\n\n  render() {\n    const { initialX } = this.state;\n    const isResizing = initialX !== null;\n\n    const { side } = this.props;\n    const pos = side === 'right'\n              ? { right: 0 }\n              : { left: 0 };\n    return (\n      <div\n        onMouseDown={this.onStartDrag}\n        onMouseUp={this.onEndDrag}\n        style={{\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          width: 5,\n          cursor: 'ew-resize',\n          ...pos\n        }}>\n        {isResizing\n          ? (\n            <div\n              onMouseMove={this.onDrag}\n              style={{\n                height: '100%',\n                width: '100%',\n                backgroundColor: 'rgba(0,0,0,0)',\n                opacity: '0',\n                position: 'fixed',\n                zIndex: '9999',\n                top: '0',\n                left: '0',\n                bottom: '0',\n                right: '0',\n              }} />\n          ) : null}\n      </div>\n    );\n  }\n\n  onStartDrag = evt => {\n    this.setState({\n      initialX: evt.nativeEvent.clientX,\n      pxPerWidthUnit: evt.target.parentElement.clientWidth / this.props.width\n    })\n  };\n\n  onDrag = evt => {\n    const { initialX, pxPerWidthUnit } = this.state;\n    if ( initialX === null ) {\n      return;\n    }\n\n    const x = evt.nativeEvent.clientX;\n    const offset = x - initialX;\n    if ( Math.abs(offset) < (pxPerWidthUnit / 2) ) {\n      // we have not moved at least half a unit\n      return;\n    }\n\n    const { side, canExpandLeft, canExpandRight } = this.props;\n\n    if ( side === 'left' && offset < 0 && !canExpandLeft ) {\n      // we're encroaching on our left neighbor and we can't expand in that direction\n      return;\n    }\n\n    if ( side === 'right' && offset > 0 && !canExpandRight ) {\n      // we're encroaching on our right neighbor and we can't expand in that direction\n      return;\n    }\n\n    // we round to the nearest unit to avoid any weird jumps\n    const roundedX = initialX + Math.round(offset / pxPerWidthUnit) * pxPerWidthUnit;\n    this.setState({\n      initialX: roundedX\n    }, () => {\n      this.props.onResize(offset, pxPerWidthUnit);\n    });\n  };\n\n  onEndDrag = evt => {\n    this.setState({\n      initialX: null\n    })\n  };\n}\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHovered: false\n    };\n  }\n\n  render() {\n    const {\n      canExpandLeft,\n      canExpandRight,\n      selectedPath,\n      relativePath,\n      path,\n      cell,\n      isEditing,\n      renderPresenter,\n      onRemove,\n      onSelectPresenterForEditing\n    } = this.props;\n    const cellPresenter = cell.get('presenter');\n    const width = cell.get('width');\n    const isHovered = isEditing && this.state.isHovered;\n    const shouldRenderPresenter = !!cellPresenter || (!!selectedPath && equalPaths(path, selectedPath));\n\n    return (\n      <Paper\n        zDepth={isHovered ? 2 : 0}\n        style={{\n          background: 'transparent',\n          paddingLeft: 0,\n          paddingRight: 0\n        }}\n        onMouseMove={evt => {\n          this.setState({\n            isHovered: true\n          });\n        }}\n        onMouseOut={evt => {\n          this.setState({\n            isHovered: false\n          });\n        }}\n        className={`col-${width}`}>\n        <HorizontalResizer\n          canExpandLeft={canExpandLeft}\n          canExpandRight={canExpandRight}\n          width={width}\n          side=\"left\"\n          onResize={this.onResize.bind(null, 'left')} />\n        <HorizontalResizer\n          canExpandLeft={canExpandLeft}\n          canExpandRight={canExpandRight}\n          width={width}\n          side=\"right\"\n          onResize={this.onResize.bind(null, 'right')} />\n        <FlatButton\n          onClick={() => { onRemove(); }}\n          style={{\n            transition: 'opacity 0.25s',\n            opacity: isHovered ? 1 : 0,\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            minWidth: 16,\n            minHeight: 16,\n            width: 16,\n            height: 16,\n            padding: 0,\n            lineHeight: 0\n          }}\n          labelStyle={{\n            padding: 0\n          }}\n          label=\"x\" />\n        {shouldRenderPresenter\n          ? (\n            <FlatButton\n              onClick={evt => {\n                evt.stopPropagation();\n                onSelectPresenterForEditing(path);\n              }}\n              style={{\n                transition: 'opacity 0.25s',\n                opacity: isHovered ? 1 : 0,\n                position: 'absolute',\n                bottom: 0,\n                right: 0,\n                minWidth: 16,\n                minHeight: 16,\n                width: 16,\n                height: 16,\n                padding: 0,\n                lineHeight: 0\n              }}\n              labelStyle={{\n                padding: 0\n              }}>\n              <EditPresenterIcon\n                style={{\n                  width: 16,\n                  height: 16\n                }} />\n            </FlatButton>\n          ) : null}\n        {shouldRenderPresenter\n          ? renderPresenter(relativePath, cellPresenter)\n          : (\n            <FloatingActionButton\n              disabled={!isEditing}\n              onClick={evt => {\n                evt.stopPropagation();\n                onSelectPresenterForEditing(path);\n              }}>\n              <EditPresenterIcon />\n            </FloatingActionButton>\n          )}\n      </Paper>\n    );\n  }\n\n  onResize = (side, movementX, pxPerWidthUnit) => {\n    const { onAdjustWidth, cell } = this.props;\n    const sign = side === 'left' ? -1 : 1;\n    const offset = sign * Math.round(movementX / pxPerWidthUnit);\n    if ( offset !== 0 ) {\n      onAdjustWidth(side, offset);\n    }\n  };\n}\n\nexport default function makeGridPresenter(presenter) {\n  const GridPresenter = ({\n    selectedPath,\n    isEditing,\n    config = new Map(),\n    renderPresenter,\n    path,\n    onUpdate,\n    onSelectPresenterForEditing\n  }) => {\n    const rows = config.get('rows', new List());\n\n    return (\n      <div\n        style={{\n          paddingRight: 50\n        }}>\n        <div className=\"container\">\n          {rows.map((row, rowIdx) => {\n            const rowPath = ['config', 'rows', rowIdx];\n            const totalWidth = row.reduce((sum, cell) => sum + cell.get('width'), 0);\n            return (\n              <div\n                key={`row-${rowIdx}`}\n                style={{\n                  minHeight: 20,\n                  marginTop: 20,\n                  marginBottom: 20,\n                  position: 'relative'\n                }}\n                className=\"row\">\n                {row.map((cell, cellIdx) => {\n                  const presenterPath = rowPath.concat([cellIdx, 'presenter']);\n                  const canExpandLeft = cellIdx > 0 ? row.getIn([cellIdx - 1, 'width']) > 1 : false;\n                  const canExpandRight = totalWidth < 12 || (cellIdx < row.size - 1 && row.getIn([cellIdx + 1, 'width']) > 1);\n\n                  return (\n                    <Cell\n                      key={`cell-${cellIdx}`}\n                      selectedPath={selectedPath}\n                      relativePath={presenterPath}\n                      path={path.concat(presenterPath)}\n                      cell={cell}\n                      renderPresenter={renderPresenter}\n                      isEditing={isEditing}\n                      onSelectPresenterForEditing={onSelectPresenterForEditing}\n                      canExpandLeft={canExpandLeft}\n                      canExpandRight={canExpandRight}\n                      onAdjustWidth={(side, change) => {\n                        const otherCellIdx = side === 'left'\n                                           ? cellIdx - 1\n                                           : cellIdx + 1;\n                        let nextRow = row.updateIn([cellIdx, 'width'], w => Math.max(1, w + change));\n                        if ( otherCellIdx >= 0 && otherCellIdx < row.size ) {\n                          nextRow = nextRow.updateIn([otherCellIdx, 'width'], w => Math.max(1, w - change));\n                        }\n                        const nextTotalWidth = nextRow.reduce((sum, cell) => sum + cell.get('width'), 0);\n                        if ( nextTotalWidth > 12 ) {\n                          return;\n                        }\n\n                        onUpdate(rowPath, nextRow);\n                      }}\n                      onRemove={() => {\n                        onUpdate(\n                          rowPath,\n                          row.delete(cellIdx)\n                        );\n                      }} />\n                  );\n                })}\n                {isEditing && totalWidth < 12\n                  ? (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        right: 0,\n                        width: 50,\n                        minWidth: 50,\n                        height: '100%',\n                        pointerEvents: 'none'\n                      }}>\n                      <RaisedButton\n                        primary\n                        style={{\n                          pointerEvents: 'auto',\n                          position: 'absolute',\n                          left: 70,\n                          width: 50,\n                          minWidth: 50,\n                          height: '100%'\n                        }}\n                        className=\"grid-layout-add-cell\"\n                        label=\"+\"\n                        onClick={() => {\n                          onUpdate(\n                            rowPath,\n                            row.push(new Map({\n                              width: 1,\n                              presenter: null\n                            }))\n                          );\n                        }} />\n                    </div>\n                  ) : null}\n              </div>\n            );\n          })}\n        </div>\n        {isEditing\n          ? (\n            <RaisedButton\n              primary\n              fullWidth\n              style={{\n                position: 'absolute',\n                left: 0,\n                right: 0\n              }}\n              label=\"+\"\n              onClick={() => {\n                onUpdate(\n                  ['config', 'rows'],\n                  rows.push(new List())\n                );\n              }} />\n          ) : null}\n      </div>\n    );\n  };\n\n  return presenter({\n    schema: fromJS({\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"$id\": \"http://sheetyapp.com/schemas/core-presenters/grid-layout.json\",\n      \"title\": \"Grid Layout\",\n      \"description\": \"Grid Layout renders other presenters in a grid.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Identifier\",\n          \"description\": \"A unique identifier for this presenter.  Used for analytics events.\",\n          \"type\": \"string\",\n          \"default\": \"\"\n        },\n        \"type\": {\n          \"const\": \"grid-layout\",\n          \"default\": \"grid-layout\"\n        },\n        \"config\": {\n          \"title\": \"Configuration\",\n          \"description\": \"Pre-specified configuration\",\n          \"type\": \"object\",\n          \"default\": {},\n          \"properties\": {\n            \"rows\": {\n              \"title\": \"Rows\",\n              \"description\": \"Specifies a row of the grid.\",\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"internallyConfigured\": true,\n              \"items\": {\n                \"title\": \"Row\",\n                \"type\": \"array\",\n                \"linkable\": false,\n                \"items\": {\n                  \"title\": \"Cell\",\n                  \"type\": \"object\",\n                  \"default\": {},\n                  \"linkable\": false,\n                  \"properties\": {\n                    \"width\": {\n                      \"title\": \"Width\",\n                      \"description\": \"Number of columns this presenter will occupy.\",\n                      \"type\": \"integer\",\n                      \"minimum\": 1,\n                      \"maximum\": 12,\n                      \"linkable\": false\n                    },\n                    \"presenter\": {\n                      \"title\": \"Presenter\",\n                      \"description\": \"The presenter to render in this cell.\",\n                      \"$ref\": \"http://sheetyapp.com/schemas/core-presenters/configurers/presenter.json\",\n                      \"linkable\": false\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n  })(GridPresenter);\n}\n"]}