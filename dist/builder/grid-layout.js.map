{"version":3,"sources":["../../src/builder/grid-layout.js"],"names":["makeGridPresenter","presenter","GridPresenter","config","renderPresenter","path","onSelectPresenterForEditing","rows","get","map","row","rowIdx","marginTop","marginBottom","cell","cellIdx","cellPath","concat","cellPresenter","evt","stopPropagation","configKeyDocs"],"mappings":";;;;;kBAGwBA,iB;;AAHxB;;;;AACA;;;;AAEe,SAASA,iBAAT,CAA2BC,SAA3B,EAAsC;AACnD,MAAMC,gBAAgB,SAAhBA,aAAgB,OAKhB;AAAA,2BAJJC,MAII;AAAA,QAJJA,MAII,+BAJK,oBAIL;AAAA,QAHJC,eAGI,QAHJA,eAGI;AAAA,QAFJC,IAEI,QAFJA,IAEI;AAAA,QADJC,2BACI,QADJA,2BACI;;AACJ,QAAMC,OAAOJ,OAAOK,GAAP,CAAW,MAAX,EAAmB,qBAAnB,CAAb;;AAEA,WACE;AAAA;AAAA,QAAK,WAAU,WAAf;AACGD,WAAKE,GAAL,CAAS,UAACC,GAAD,EAAMC,MAAN;AAAA,eACR;AAAA;AAAA;AACE,0BAAYA,MADd;AAEE,mBAAO,EAACC,WAAW,EAAZ,EAAgBC,cAAc,EAA9B,EAFT;AAGE,uBAAU,KAHZ;AAIGH,cAAID,GAAJ,CAAQ,UAACK,IAAD,EAAOC,OAAP,EAAmB;AAC1B,gBAAMC,WAAWX,KAAKY,MAAL,CAAY,CAAC,QAAD,EAAW,MAAX,EAAmBN,MAAnB,EAA2BI,OAA3B,EAAoC,WAApC,CAAZ,CAAjB;AACA,gBAAMG,gBAAgBJ,KAAKN,GAAL,CAAS,WAAT,CAAtB;;AAEA,mBACE;AAAA;AAAA;AACE,+BAAaO,OADf;AAEE,oCAAkBD,KAAKN,GAAL,CAAS,OAAT,CAFpB;AAGG,eAAC,CAACU,aAAF,GACGd,gBAAgBY,QAAhB,EAA0BE,aAA1B,CADH,GAGG;AAAA;AAAA;AACE,2BAAS,iBAACC,GAAD,EAAS;AAChBA,wBAAIC,eAAJ;AACAd,gDAA4BU,QAA5B;AACD,mBAJH;AAAA;AAAA;AANN,aADF;AAiBD,WArBA;AAJH,SADQ;AAAA,OAAT;AADH,KADF;AAiCD,GAzCD;;AA2CA,SAAOf,UAAU;AACfoB,mBAAe,mBAAQ;AACrBd,YAAM;AADe,KAAR;AADA,GAAV,EAIJL,aAJI,CAAP;AAKD","file":"grid-layout.js","sourcesContent":["import React from 'react';\nimport { Map, List } from 'immutable';\n\nexport default function makeGridPresenter(presenter) {\n  const GridPresenter = ({\n    config = new Map(),\n    renderPresenter,\n    path,\n    onSelectPresenterForEditing\n  }) => {\n    const rows = config.get('rows', new List());\n\n    return (\n      <div className=\"container\">\n        {rows.map((row, rowIdx) => (\n          <div\n            key={`row-${rowIdx}`}\n            style={{marginTop: 20, marginBottom: 20}}\n            className=\"row\">\n            {row.map((cell, cellIdx) => {\n              const cellPath = path.concat(['config', 'rows', rowIdx, cellIdx, 'presenter']);\n              const cellPresenter = cell.get('presenter');\n\n              return (\n                <div\n                  key={`cell-${cellIdx}`}\n                  className={`col-${cell.get('width')}`}>\n                  {!!cellPresenter\n                    ? renderPresenter(cellPath, cellPresenter)\n                    : (\n                      <button\n                        onClick={(evt) => {\n                          evt.stopPropagation();\n                          onSelectPresenterForEditing(cellPath);\n                        }}>\n                        Set presenter\n                      </button>\n                    )}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return presenter({\n    configKeyDocs: new Map({\n      rows: 'rows is an iterable of row iterables.  Each row iterable is composed of cell descriptors.  Each cell descriptor is an object/map like { width, presenter }, where width is a value from 1-12 and presenter is a presenter definition.'\n    })\n  })(GridPresenter);\n}\n"]}