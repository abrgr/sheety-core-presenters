{"version":3,"sources":["../../src/builder/grid-layout.js"],"names":["makeGridPresenter","Cell","props","state","isHovered","selectedPath","relativePath","path","cell","isEditing","renderPresenter","onRemove","onSelectPresenterForEditing","cellPresenter","get","width","background","paddingLeft","paddingRight","setState","transition","opacity","position","top","right","minWidth","minHeight","height","padding","lineHeight","evt","stopPropagation","bottom","presenter","GridPresenter","config","onUpdate","rows","map","row","rowIdx","rowPath","marginTop","marginBottom","cellIdx","presenterPath","concat","delete","pointerEvents","left","push","schema"],"mappings":"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","file":"grid-layout.js","sourcesContent":["import React, { Component } from 'react';\nimport { fromJS, Map, List } from 'immutable';\nimport FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport EditPresenterIcon from 'material-ui/svg-icons/editor/border-inner';\nimport equalPaths from './equal-paths';\n\nimport 'bootstrap/dist/css/bootstrap-grid.css';\nimport './grid-layout.css';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isHovered: false\n    };\n  }\n\n  render() {\n    const {\n      selectedPath,\n      relativePath,\n      path,\n      cell,\n      isEditing,\n      renderPresenter,\n      onRemove,\n      onSelectPresenterForEditing\n    } = this.props;\n    const cellPresenter = cell.get('presenter');\n    const width = cell.get('width');\n    const isHovered = isEditing && this.state.isHovered;\n\n    return (\n      <Paper\n        zDepth={isHovered ? 2 : 0}\n        style={{\n          background: 'transparent',\n          paddingLeft: 0,\n          paddingRight: 0\n        }}\n        onMouseMove={evt => {\n          this.setState({\n            isHovered: true\n          });\n        }}\n        onMouseOut={evt => {\n          this.setState({\n            isHovered: false\n          });\n        }}\n        className={`col-${width}`}>\n        <FlatButton\n          onClick={() => { onRemove(); }}\n          style={{\n            transition: 'opacity 0.25s',\n            opacity: isHovered ? 1 : 0,\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            minWidth: 16,\n            minHeight: 16,\n            width: 16,\n            height: 16,\n            padding: 0,\n            lineHeight: 0\n          }}\n          labelStyle={{\n            padding: 0\n          }}\n          label=\"x\" />\n        <FlatButton\n          onClick={evt => {\n            evt.stopPropagation();\n            onSelectPresenterForEditing(path);\n          }}\n          style={{\n            transition: 'opacity 0.25s',\n            opacity: isHovered ? 1 : 0,\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            minWidth: 16,\n            minHeight: 16,\n            width: 16,\n            height: 16,\n            padding: 0,\n            lineHeight: 0\n          }}\n          labelStyle={{\n            padding: 0\n          }}>\n          <EditPresenterIcon\n            style={{\n              width: 16,\n              height: 16\n            }} />\n        </FlatButton>\n        {!!cellPresenter || (!!selectedPath && equalPaths(path, selectedPath))\n          ? renderPresenter(relativePath, cellPresenter)\n          : (\n            <FloatingActionButton\n              disabled={!isEditing}\n              onClick={evt => {\n                evt.stopPropagation();\n                onSelectPresenterForEditing(path);\n              }}>\n              <EditPresenterIcon />\n            </FloatingActionButton>\n          )}\n      </Paper>\n    );\n  }\n}\n\nexport default function makeGridPresenter(presenter) {\n  const GridPresenter = ({\n    selectedPath,\n    isEditing,\n    config = new Map(),\n    renderPresenter,\n    path,\n    onUpdate,\n    onSelectPresenterForEditing\n  }) => {\n    const rows = config.get('rows', new List());\n\n    return (\n      <div\n        style={{\n          paddingRight: 50\n        }}>\n        <div className=\"container\">\n          {rows.map((row, rowIdx) => {\n            const rowPath = ['config', 'rows', rowIdx];\n            return (\n              <div\n                key={`row-${rowIdx}`}\n                style={{\n                  minHeight: 20,\n                  marginTop: 20,\n                  marginBottom: 20,\n                  position: 'relative'\n                }}\n                className=\"row\">\n                {row.map((cell, cellIdx) => {\n                  const presenterPath = rowPath.concat([cellIdx, 'presenter']);\n\n                  return (\n                    <Cell\n                      key={`cell-${cellIdx}`}\n                      selectedPath={selectedPath}\n                      relativePath={presenterPath}\n                      path={path.concat(presenterPath)}\n                      cell={cell}\n                      renderPresenter={renderPresenter}\n                      isEditing={isEditing}\n                      onSelectPresenterForEditing={onSelectPresenterForEditing}\n                      onRemove={() => {\n                        onUpdate(\n                          rowPath,\n                          row.delete(cellIdx)\n                        );\n                      }} />\n                  );\n                })}\n                {isEditing\n                  ? (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        right: 0,\n                        width: 50,\n                        minWidth: 50,\n                        height: '100%',\n                        pointerEvents: 'none'\n                      }}>\n                      <RaisedButton\n                        primary\n                        style={{\n                          pointerEvents: 'auto',\n                          position: 'absolute',\n                          left: 70,\n                          width: 50,\n                          minWidth: 50,\n                          height: '100%'\n                        }}\n                        className=\"grid-layout-add-cell\"\n                        label=\"+\"\n                        onClick={() => {\n                          onUpdate(\n                            rowPath,\n                            row.push(new Map({\n                              width: 1,\n                              presenter: null\n                            }))\n                          );\n                        }} />\n                    </div>\n                  ) : null}\n              </div>\n            );\n          })}\n        </div>\n        {isEditing\n          ? (\n            <RaisedButton\n              primary\n              fullWidth\n              style={{\n                position: 'absolute',\n                left: 0,\n                right: 0\n              }}\n              label=\"+\"\n              onClick={() => {\n                onUpdate(\n                  ['config', 'rows'],\n                  rows.push(new List())\n                );\n              }} />\n          ) : null}\n      </div>\n    );\n  };\n\n  return presenter({\n    schema: fromJS({\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"$id\": \"http://sheetyapp.com/schemas/core-presenters/grid-layout.json\",\n      \"title\": \"Grid Layout\",\n      \"description\": \"Grid Layout renders other presenters in a grid.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Identifier\",\n          \"description\": \"A unique identifier for this presenter.  Used for analytics events.\",\n          \"type\": \"string\",\n          \"default\": \"\"\n        },\n        \"type\": {\n          \"const\": \"grid-layout\",\n          \"default\": \"grid-layout\"\n        },\n        \"config\": {\n          \"title\": \"Configuration\",\n          \"description\": \"Pre-specified configuration\",\n          \"type\": \"object\",\n          \"default\": {},\n          \"properties\": {\n            \"rows\": {\n              \"title\": \"Rows\",\n              \"description\": \"Specifies a row of the grid.\",\n              \"type\": \"array\",\n              \"linkable\": false,\n              \"internallyConfigured\": true,\n              \"items\": {\n                \"title\": \"Row\",\n                \"type\": \"array\",\n                \"linkable\": false,\n                \"items\": {\n                  \"title\": \"Cell\",\n                  \"type\": \"object\",\n                  \"default\": {},\n                  \"linkable\": false,\n                  \"properties\": {\n                    \"width\": {\n                      \"title\": \"Width\",\n                      \"description\": \"Number of columns this presenter will occupy.\",\n                      \"type\": \"integer\",\n                      \"minimum\": 1,\n                      \"maximum\": 12,\n                      \"linkable\": false\n                    },\n                    \"presenter\": {\n                      \"title\": \"Presenter\",\n                      \"description\": \"The presenter to render in this cell.\",\n                      \"$ref\": \"http://sheetyapp.com/schemas/core-presenters/configurers/presenter.json\",\n                      \"linkable\": false\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n  })(GridPresenter);\n}\n"]}