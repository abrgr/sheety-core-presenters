{"version":3,"sources":["../../src/app/sheet.js"],"names":["makeSheetPresenter","presenter","Sheet_","props","onAfterChange","changes","sources","arrayDataQuery","setCellValues","sheet","rangeRef","fromA1Ref","upperLeft","get","tabId","upperLeftRow","upperLeftCol","map","rowIdx","colIdx","_","newVal","cellRef","cell","getCell","format","fromUserEnteredValue","mergeCells","config","merges","range","a1","startRow","getIn","startCol","endRow","endCol","row","col","rowspan","colspan","toJS","getCellConfig","arrayCells","readOnly","renderer","cellRenderer","instance","td","prop","value","cellProperties","renderers","TextRenderer","call","formatting","find","a1Range","rangeContains","forEach","key","style","state","id","v4","arrayData","formatted","arrayDataDocs","configKeyDocs"],"mappings":"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","file":"sheet.js","sourcesContent":["import React, { Component } from 'react';\nimport HotTable from 'react-handsontable';\nimport Handsontable from 'handsontable';\nimport { Map, List } from 'immutable';\nimport uuid from 'uuid';\nimport { CellRef, CellRefRange } from 'sheety-model';\n\nexport default function makeSheetPresenter(presenter) {\n  class Sheet_ extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: `sheet-${uuid.v4()}`\n      };\n    }\n\n    render() {\n      const { arrayData, config } = this.props;\n      return (\n        <HotTable\n          root={this.state.id}\n          readOnly={true}\n          data={arrayData}\n          colHeaders={config.get('showColumnHeaders')}\n          rowHeaders={config.get('showRowHeaders')}\n          autoRowSize={true}\n          stretchH=\"all\"\n          preventOverflow=\"horizontal\"\n          mergeCells={this.mergeCells()}\n          afterChange={this.onAfterChange}\n          cells={this.getCellConfig} />\n      );\n    }\n\n    onAfterChange = (changes, sources) => {\n      const { arrayDataQuery, setCellValues, sheet } = this.props;\n      const rangeRef = CellRefRange.fromA1Ref(arrayDataQuery);\n      const upperLeft = rangeRef.get('start');\n      const tabId = upperLeft.get('tabId');\n      const upperLeftRow = upperLeft.get('rowIdx');\n      const upperLeftCol = upperLeft.get('colIdx');\n      setCellValues(\n        new Map(\n          new List(changes).map(([rowIdx, colIdx, _, newVal]) => {\n            const cellRef = new CellRef({\n              tabId,\n              rowIdx: upperLeftRow + rowIdx,\n              colIdx: upperLeftCol + colIdx\n            });\n            const cell = sheet.getCell(cellRef);\n            const format = cell && cell.get('format');\n            return [\n              cellRef,\n              format ? format.fromUserEnteredValue(newVal) : newVal\n            ];\n          })\n        )\n      );\n    };\n\n    mergeCells = () => {\n      const { config } = this.props;\n      const merges = config && config.get('merges');\n      return (merges || new List()).map(a1 => {\n         const range = CellRefRange.fromA1Ref(a1);\n         const startRow = range.getIn(['start', 'rowIdx']);\n         const startCol = range.getIn(['start', 'colIdx']);\n         const endRow = range.getIn(['end', 'rowIdx']);\n         const endCol = range.getIn(['end', 'colIdx']);\n         return {\n           row: startRow,\n           col: startCol,\n           rowspan: endRow - startRow + 1,\n           colspan: endCol - startCol + 1\n         };\n       }).toJS();\n    };\n\n    getCellConfig = (row, col) => {\n      const { arrayCells } = this.props;\n      const cell = arrayCells[row][col];\n\n      return {\n        readOnly: cell && cell.get('isUserEditable') ? false : true,\n        renderer: this.cellRenderer\n      };\n    };\n\n    cellRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n      Handsontable.renderers.TextRenderer.call(instance, instance, td, row, col, prop, value, cellProperties);\n\n      const { config } = this.props;\n      const formatting = config && config.get('formatting');\n      const format = formatting && formatting.find((format, a1Range) => (\n        rangeContains(CellRefRange.fromA1Ref(a1Range), row, col)\n      ));\n\n      if ( format ) {\n        format.forEach((value, key) => {\n          td.style[key] = value;\n        });\n      }\n    }\n  }\n\n  function rangeContains(range, row, col) {\n    return range.getIn(['start', 'rowIdx']) <= row\n        && range.getIn(['end', 'rowIdx']) >= row\n        && range.getIn(['start', 'colIdx']) <= col\n        && range.getIn(['end', 'colIdx']) >= col;\n  }\n\n  return presenter({\n    formatted: true,\n    arrayDataDocs: 'An A1 reference to the data to show',\n    configKeyDocs: new Map({\n      'formatting': 'Map from A1 range references to a map from css property name to value.',\n      'merges': 'List of A1 ranges where the cells in each range will be merged.',\n      'showColumnHeaders': 'Boolean indicating whether to show column headers.',\n      'showRowHeaders': 'Boolean indicating whether to show row headers.'\n    })\n  })(Sheet_);\n}\n"]}