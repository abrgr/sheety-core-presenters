{"version":3,"sources":["../../src/app/spreadsheet.js"],"names":["makeSpreadsheetPresenter","presenter","Spreadsheet_","props","onAfterChange","changes","source","arrayDataQuery","setCellValues","sheet","rangeRef","fromA1Ref","upperLeft","get","tabId","upperLeftRow","upperLeftCol","map","rowIdx","colIdx","_","newVal","cellRef","cell","getCell","format","fromUserEnteredValue","mergeCells","config","merges","range","a1","startRow","getIn","startCol","endRow","endCol","row","col","rowspan","colspan","toJS","getCellConfig","userEditableRanges","isUserEditable","some","indexOf","rangeContains","ref","readOnly","renderer","cellRenderer","instance","td","prop","value","cellProperties","renderers","TextRenderer","call","formatting","find","forEach","key","style","state","id","v4","arrayData","formatted"],"mappings":"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","file":"spreadsheet.js","sourcesContent":["import React, { Component } from 'react';\nimport HotTable from 'react-handsontable';\nimport Handsontable from 'handsontable';\nimport { Map, List } from 'immutable';\nimport uuid from 'uuid';\nimport { CellRef, CellRefRange } from 'sheety-model';\n\nexport default function makeSpreadsheetPresenter(presenter) {\n  class Spreadsheet_ extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        id: `sheet-${uuid.v4()}`\n      };\n    }\n\n    render() {\n      const { arrayData, config } = this.props;\n      return (\n        <HotTable\n          root={this.state.id}\n          readOnly={true}\n          data={arrayData}\n          colHeaders={config.get('showColumnHeaders')}\n          rowHeaders={config.get('showRowHeaders')}\n          autoRowSize={true}\n          stretchH=\"all\"\n          preventOverflow=\"horizontal\"\n          mergeCells={this.mergeCells()}\n          afterChange={this.onAfterChange}\n          cells={this.getCellConfig} />\n      );\n    }\n\n    onAfterChange = (changes, source) => {\n      if ( source === 'loadData' ) {\n        return;\n      }\n\n      const { arrayDataQuery, setCellValues, sheet } = this.props;\n      const rangeRef = CellRefRange.fromA1Ref(arrayDataQuery);\n\n      if ( !rangeRef ) {\n        return;\n      }\n\n      const upperLeft = rangeRef.get('start');\n      const tabId = upperLeft.get('tabId');\n      const upperLeftRow = upperLeft.get('rowIdx');\n      const upperLeftCol = upperLeft.get('colIdx');\n      setCellValues(\n        new Map(\n          new List(changes).map(([rowIdx, colIdx, _, newVal]) => {\n            const cellRef = new CellRef({\n              tabId,\n              rowIdx: upperLeftRow + rowIdx,\n              colIdx: upperLeftCol + colIdx\n            });\n            const cell = sheet.getCell(cellRef);\n            const format = cell && cell.get('format');\n            return [\n              cellRef,\n              format ? format.fromUserEnteredValue(newVal) : newVal\n            ];\n          })\n        )\n      );\n    };\n\n    mergeCells = () => {\n      const { config } = this.props;\n      const merges = config && config.get('merges');\n      return (merges || new List()).map(a1 => {\n         const range = CellRefRange.fromA1Ref(a1);\n         const startRow = range.getIn(['start', 'rowIdx']);\n         const startCol = range.getIn(['start', 'colIdx']);\n         const endRow = range.getIn(['end', 'rowIdx']);\n         const endCol = range.getIn(['end', 'colIdx']);\n         return {\n           row: startRow,\n           col: startCol,\n           rowspan: endRow - startRow + 1,\n           colspan: endCol - startCol + 1\n         };\n       }).toJS();\n    };\n\n    getCellConfig = (row, col) => {\n      const { config } = this.props;\n      const userEditableRanges = config ? config.get('userEditableRanges', new List()) : new List();\n      const isUserEditable = userEditableRanges.some(range => {\n        if ( range.indexOf(':') > 0 ) {\n          return rangeContains(CellRefRange.fromA1Ref(range), row, col);\n        }\n\n        const ref = CellRef.fromA1Ref(range);\n        return ref.get('rowIdx') === row && ref.get('colIdx') === col;\n      });\n\n      return {\n        readOnly: !isUserEditable,\n        renderer: this.cellRenderer\n      };\n    };\n\n    cellRenderer = (instance, td, row, col, prop, value, cellProperties) => {\n      Handsontable.renderers.TextRenderer.call(instance, instance, td, row, col, prop, value, cellProperties);\n\n      const { config } = this.props;\n      const formatting = config && config.get('formatting');\n      const format = formatting && formatting.find(format => {\n        const range = CellRefRange.fromA1Ref(format.get('range'));\n        return range && rangeContains(range, row, col)\n      });\n\n      if ( format && !!format.get('style') ) {\n        format.get('style').forEach((value, key) => {\n          td.style[key] = value;\n        });\n      }\n    }\n  }\n\n  function rangeContains(range, row, col) {\n    return range.getIn(['start', 'rowIdx']) <= row\n        && range.getIn(['end', 'rowIdx']) >= row\n        && range.getIn(['start', 'colIdx']) <= col\n        && range.getIn(['end', 'colIdx']) >= col;\n  }\n\n  return presenter({\n    formatted: true\n  })(Spreadsheet_);\n}\n"]}