{"version":3,"sources":["../../src/app/require-auth.js"],"names":["makeRequireAuthPresenter","presenter","deps","firebasePromise","Error","RequireAuthPresenter","props","authenticated","setState","isAuthed","isAuthenticated","auth","currentUser","isAnonymous","state","id","v4","then","firebase","ui","AuthUI","start","autoUpgradeAnonymousUsers","signInSuccessUrl","window","location","href","tosUrl","signInOptions","EmailAuthProvider","PROVIDER_ID","provider","GoogleAuthProvider","callbacks","signInSuccess","user","cred","redirectUrl","providerId","signInFailure","err","code","Promise","resolve","anonymousUser","credential","signInWithCredential","delete","renderPresenter","config","get","configKeyDocs"],"mappings":"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","file":"require-auth.js","sourcesContent":["import React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport firebaseui from 'firebaseui';\nimport uuid from 'uuid';\n\nimport 'firebaseui/dist/firebaseui.css';\n\nexport default function makeRequireAuthPresenter(presenter, deps) {\n  const firebasePromise = deps.firebasePromise;\n  if ( !firebasePromise ) {\n    return () => {\n      throw new Error('RequireAuthPresenter requires a firebasePromise dependency.  It should only be resolved once we have an auth state.');\n    };\n  }\n\n  class RequireAuthPresenter extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        id: `auth-${uuid.v4()}`, // element ids must start with a letter\n        isAuthed: false\n      };\n    }\n\n    authenticated = () => {\n      this.setState({\n        isAuthed: true\n      });\n    };\n\n    isAuthenticated = (auth) => (\n      // TODO: check roles, etc.\n      auth.currentUser && !auth.currentUser.isAnonymous\n    );\n\n    componentDidMount() {\n      firebasePromise.then(firebase => {\n        const auth = firebase.auth();\n        if ( this.isAuthenticated(auth) ) {\n          return this.authenticated();\n        }\n\n        // not authenticated yet\n        const ui = new firebaseui.auth.AuthUI(auth);\n        ui.start(\n          `#${this.state.id}`,\n          {\n            autoUpgradeAnonymousUsers: true,\n            signInSuccessUrl: window.location.href,\n            tosUrl: 'https://ezbds.com',\n            signInOptions: [\n              firebase.auth.EmailAuthProvider.PROVIDER_ID,\n              {\n                provider: firebase.auth.GoogleAuthProvider.PROVIDER_ID\n              }\n            ],\n            callbacks: {\n              signInSuccess: (user, cred, redirectUrl) => {\n                if ( cred && cred.providerId === 'google.com' ) {\n                  // cred.accessToken is the google oauth access token\n                }\n\n                this.authenticated();\n\n                return true;\n              },\n              signInFailure: (err) => {\n                if ( err.code !== 'firebaseui/anonymous-upgrade-merge-conflict' ) {\n                  return Promise.resolve();\n                }\n\n                const anonymousUser = auth.currentUser;\n                const cred = err.credential;\n\n                // TODO: actually copy data per https://github.com/firebase/firebaseui-web#using-firebaseui-for-authentication\n\n                return auth.signInWithCredential(cred)\n                           .then(_ => anonymousUser.delete())\n                           .then(_ => this.authenticated());\n              }\n            }\n          }\n        );\n      });\n    }\n\n    render() {\n      const { id, isAuthed } = this.state;\n\n      if ( isAuthed ) {\n        const { renderPresenter, config } = this.props;\n        return renderPresenter(config.get('presenter'));\n      }\n\n      return (\n        <div id={id} />\n      );\n    }\n  };\n\n  return presenter({\n    configKeyDocs: new Map({\n      presenter: 'Inner presenter definition'\n    })\n  })(RequireAuthPresenter);\n}\n"]}