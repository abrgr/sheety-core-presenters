{"version":3,"sources":["../../src/sanitizer/csslexer.js"],"names":["lexCss","decodeCss","decodeCssEscape","s","i","parseInt","substring","String","fromCharCode","escapeCssString","replacer","replace","escapeCssStrChar","ch","cssStrChars","charCodeAt","toString","escapeCssUrlChar","cssUrlChars","WC","W","NL","SURROGATE_PAIR","NONASCII","UNICODE_TAIL","UNICODE","ESCAPE_TAIL","ESCAPE","URLCHAR","STRINGCHAR","STRING","NUM","NMSTART","NMCHAR","NAME","IDENT","ATKEYWORD","HASH","NUMBER","WORD_TERM","PERCENTAGE","DIMENSION","NUMERIC_VALUE","URI","UNICODE_RANGE","CDO","CDC","S","COMMENT","FUNCTION","INCLUDES","DASHMATCH","PREFIXMATCH","SUFFIXMATCH","SUBSTRINGMATCH","CMP_OPS","CHAR","BOM","CSS_TOKEN","RegExp","join","CSS_DECODER","URL_RE","css","cssText","tokens","match","j","last","n","length","tok","len","cc","test"],"mappings":"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","file":"csslexer.js","sourcesContent":["/* eslint-disable */\n\n//\n// https://raw.githubusercontent.com/google/caja/1056be89dad487f9178d89f462fe5cb207c7e604/src/com/google/caja/plugin/csslexer.js\n//\n\n// Copyright (C) 2011 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * A lexical scannar for CSS3 as defined at http://www.w3.org/TR/css3-syntax .\n *\n * @author Mike Samuel <mikesamuel@gmail.com>\n * \\@provides lexCss, decodeCss\n * \\@overrides window\n */\n\nvar lexCss;\nvar decodeCss;\n\n(function () {\n\n  /**\n   * Decodes an escape sequence as specified in CSS3 section 4.1.\n   * http://www.w3.org/TR/css3-syntax/#characters\n   * @private\n   */\n  function decodeCssEscape(s) {\n    var i = parseInt(s.substring(1), 16);\n    // If parseInt didn't find a hex diigt, it returns NaN so return the\n    // escaped character.\n    // Otherwise, parseInt will stop at the first non-hex digit so there's no\n    // need to worry about trailing whitespace.\n    if (i > 0xffff) {\n      // A supplemental codepoint.\n      return i -= 0x10000,\n        String.fromCharCode(\n            0xd800 + (i >> 10),\n            0xdc00 + (i & 0x3FF));\n    } else if (i == i) {\n      return String.fromCharCode(i);\n    } else if (s[1] < ' ') {\n      // \"a backslash followed by a newline is ignored\".\n      return '';\n    } else {\n      return s[1];\n    }\n  }\n\n  /**\n   * Returns an equivalent CSS string literal given plain text: foo -> \"foo\".\n   * @private\n   */\n  function escapeCssString(s, replacer) {\n    return '\"' + s.replace(/[\\u0000-\\u001f\\\\\\\"<>]/g, replacer) + '\"';\n  }\n\n  /**\n   * Maps chars to CSS escaped equivalents: \"\\n\" -> \"\\\\a \".\n   * @private\n   */\n  function escapeCssStrChar(ch) {\n    return cssStrChars[ch]\n        || (cssStrChars[ch] = '\\\\' + ch.charCodeAt(0).toString(16) + ' ');\n  }\n\n  /**\n   * Maps chars to URI escaped equivalents: \"\\n\" -> \"%0a\".\n   * @private\n   */\n  function escapeCssUrlChar(ch) {\n    return cssUrlChars[ch]\n        || (cssUrlChars[ch] = (ch < '\\x10' ? '%0' : '%')\n            + ch.charCodeAt(0).toString(16));\n  }\n\n  /**\n   * Mapping of CSS special characters to escaped equivalents.\n   * @private\n   */\n  var cssStrChars = {\n    '\\\\': '\\\\\\\\'\n  };\n\n  /**\n   * Mapping of CSS special characters to URL-escaped equivalents.\n   * @private\n   */\n  var cssUrlChars = {\n    '\\\\': '%5c'\n  };\n\n  // The comments below are copied from the CSS3 module syntax at\n  // http://www.w3.org/TR/css3-syntax .\n  // These string constants minify out when this is run-through closure\n  // compiler.\n  // Rules that have been adapted have comments prefixed with \"Diff:\", and\n  // where rules have been combined to avoid back-tracking in the regex engine\n  // or to work around limitations, there is a comment prefixed with\n  // \"NewRule:\".\n\n  // In the below, we assume CRLF and CR have been normalize to CR.\n\n  // wc  ::=  #x9 | #xA | #xC | #xD | #x20\n  var WC = '[\\\\t\\\\n\\\\f ]';\n  // w  ::=  wc*\n  var W = WC + '*';\n  // nl  ::=  #xA | #xD #xA | #xD | #xC\n  var NL = '[\\\\n\\\\f]';\n  // nonascii  ::=  [#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]\n  // NewRule: Supplemental codepoints are represented as surrogate pairs in JS.\n  var SURROGATE_PAIR = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\n  var NONASCII = '[\\\\u0080-\\\\ud7ff\\\\ue000-\\\\ufffd]|' + SURROGATE_PAIR;\n  // unicode  ::=  '\\' [0-9a-fA-F]{1,6} wc?\n  // NewRule: No point in having ESCAPE do (\\\\x|\\\\y)\n  var UNICODE_TAIL = '[0-9a-fA-F]{1,6}' + WC + '?';\n  var UNICODE = '\\\\\\\\' + UNICODE_TAIL;\n  // escape  ::=  unicode\n  //           | '\\' [#x20-#x7E#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]\n  // NewRule: Below we use escape tail to efficiently match an escape or a\n  // line continuation so we can decode string content.\n  var ESCAPE_TAIL = '(?:' + UNICODE_TAIL\n      + '|[\\\\u0020-\\\\u007e\\\\u0080-\\\\ud7ff\\\\ue000\\\\ufffd]|'\n      + SURROGATE_PAIR + ')';\n  var ESCAPE = '\\\\\\\\' + ESCAPE_TAIL;\n  // urlchar  ::=  [#x9#x21#x23-#x26#x28-#x7E] | nonascii | escape\n  var URLCHAR = '(?:[\\\\t\\\\x21\\\\x23-\\\\x26\\\\x28-\\\\x5b\\\\x5d-\\\\x7e]|'\n      + NONASCII + '|' + ESCAPE + ')';\n  // stringchar  ::= urlchar | #x20 | '\\' nl\n  // We ignore mismatched surrogate pairs inside strings, so stringchar\n  // simplifies to a non-(quote|newline|backslash) or backslash any.\n  // Since we normalize CRLF to a single code-unit, there is no special\n  // handling needed for '\\\\' + CRLF.\n  var STRINGCHAR = '[^\\'\"\\\\n\\\\f\\\\\\\\]|\\\\\\\\[\\\\s\\\\S]';\n  // string  ::=  '\"' (stringchar | \"'\")* '\"' | \"'\" (stringchar | '\"')* \"'\"\n  var STRING = '\"(?:\\'|' + STRINGCHAR + ')*\"'\n      + '|\\'(?:\\\"|' + STRINGCHAR + ')*\\'';\n  // num  ::=  [0-9]+ | [0-9]* '.' [0-9]+\n  // Diff: We attach signs to num tokens.\n  var NUM = '[-+]?(?:[0-9]+(?:[.][0-9]+)?|[.][0-9]+)';\n  // nmstart  ::=  [a-zA-Z] | '_' | nonascii | escape\n  var NMSTART = '(?:[a-zA-Z_]|' + NONASCII + '|' + ESCAPE + ')';\n  // nmchar  ::=  [a-zA-Z0-9] | '-' | '_' | nonascii | escape\n  var NMCHAR = '(?:[a-zA-Z0-9_-]|' + NONASCII + '|' + ESCAPE + ')';\n  // name  ::=  nmchar+\n  var NAME = NMCHAR + '+';\n  // ident  ::=  '-'? nmstart nmchar*\n  var IDENT = '-?' + NMSTART + NMCHAR + '*';\n\n  // ATKEYWORD  ::=  '@' ident\n  var ATKEYWORD = '@' + IDENT;\n  // HASH  ::=  '#' name\n  var HASH = '#' + NAME;\n  // NUMBER  ::=  num\n  var NUMBER = NUM;\n\n  // NewRule: union of IDENT, ATKEYWORD, HASH, but excluding #[0-9].\n  var WORD_TERM = '(?:@?-?' + NMSTART + '|#)' + NMCHAR + '*';\n\n  // PERCENTAGE  ::=  num '%'\n  var PERCENTAGE = NUM + '%';\n  // DIMENSION  ::=  num ident\n  var DIMENSION = NUM + IDENT;\n  var NUMERIC_VALUE = NUM + '(?:%|' + IDENT + ')?';\n  // URI  ::=  \"url(\" w (string | urlchar* ) w \")\"\n  var URI = 'url[(]' + W + '(?:' + STRING + '|' + URLCHAR + '*)' + W + '[)]';\n  // UNICODE-RANGE  ::=  \"U+\" [0-9A-F?]{1,6} ('-' [0-9A-F]{1,6})?\n  var UNICODE_RANGE = 'U[+][0-9A-F?]{1,6}(?:-[0-9A-F]{1,6})?';\n  // CDO  ::=  \"<\\!--\"\n  var CDO = '<\\!--';\n  // CDC  ::=  \"-->\"\n  var CDC = '-->';\n  // S  ::=  wc+\n  var S = WC + '+';\n  // COMMENT  ::=  \"/*\" [^*]* '*'+ ([^/] [^*]* '*'+)* \"/\"\n  // Diff: recognizes // comments.\n  var COMMENT = '/(?:[*][^*]*[*]+(?:[^/][^*]*[*]+)*/|/[^\\\\n\\\\f]*)';\n  // FUNCTION  ::=  ident '('\n  // Diff: We exclude url explicitly.\n  // TODO: should we be tolerant of \"fn (\"?\n  var FUNCTION = '(?!url[(])' + IDENT + '[(]';\n  // INCLUDES  ::=  \"~=\"\n  var INCLUDES = '~=';\n  // DASHMATCH  ::=  \"|=\"\n  var DASHMATCH = '[|]=';\n  // PREFIXMATCH  ::=  \"^=\"\n  var PREFIXMATCH = '[^]=';\n  // SUFFIXMATCH  ::=  \"$=\"\n  var SUFFIXMATCH = '[$]=';\n  // SUBSTRINGMATCH  ::=  \"*=\"\n  var SUBSTRINGMATCH = '[*]=';\n  // NewRule: one rule for all the comparison operators.\n  var CMP_OPS = '[~|^$*]=';\n  // CHAR  ::=  any character not matched by the above rules, except for \" or '\n  // Diff: We exclude / and \\ since they are handled above to prevent\n  // /* without a following */ from combining when comments are concatenated.\n  var CHAR = '[^\"\\'\\\\\\\\/]|/(?![/*])';\n  // BOM  ::=  #xFEFF\n  var BOM = '\\\\uFEFF';\n\n  var CSS_TOKEN = new RegExp([\n      BOM, UNICODE_RANGE, URI, FUNCTION, WORD_TERM, STRING, NUMERIC_VALUE,\n      CDO, CDC, S, COMMENT, CMP_OPS, CHAR].join(\"|\"), 'gi');\n\n  var CSS_DECODER = new RegExp('\\\\\\\\(?:' + ESCAPE_TAIL + '|' + NL + ')', 'g');\n  var URL_RE = new RegExp('^url\\\\(' + W + '[\"\\']?|[\"\\']?' + W + '\\\\)$', 'gi');\n  /**\n   * Decodes CSS escape sequences in a CSS string body.\n   */\n   decodeCss = function (css) {\n     return css.replace(CSS_DECODER, decodeCssEscape);\n   };\n\n  /**\n   * Given CSS Text, returns an array of normalized tokens.\n   * @param {string} cssText\n   * @return {Array.<string>} tokens where all ignorable token sequences have\n   *    been reduced to a single {@code \" \"} and all strings and\n   *    {@code url(...)} tokens have been normalized to use double quotes as\n   *    delimiters and to not otherwise contain double quotes.\n   */\n  lexCss = function (cssText) {\n    // Stringify input. Additionally, insert and remove a non-latin1 character\n    // to force Firefox 33 to switch to a wide string representation, avoiding\n    // a performance bug. This workaround should become unnecessary after\n    // Firefox 34. https://bugzilla.mozilla.org/show_bug.cgi?id=1081175\n    // https://code.google.com/p/google-caja/issues/detail?id=1941\n    cssText = ('\\uffff' + cssText).replace(/^\\uffff/, '');\n\n    // // Normalize CRLF & CR to LF.\n    cssText = cssText.replace(/\\r\\n?/g, '\\n');\n\n    // Tokenize.\n    var tokens = cssText.match(CSS_TOKEN) || [];\n    var j = 0;\n    var last = ' ';\n    for (var i = 0, n = tokens.length; i < n; ++i) {\n      // Normalize all escape sequences.  We will have to re-escape some\n      // codepoints in string and url(...) bodies but we already know the\n      // boundaries.\n      // We might mistakenly treat a malformed identifier like \\22\\20\\22 as a\n      // string, but that will not break any valid stylesheets since we requote\n      // and re-escape in string below.\n      var tok = decodeCss(tokens[i]);\n      var len = tok.length;\n      var cc = tok.charCodeAt(0);\n      tok =\n          // All strings should be double quoted, and the body should never\n          // contain a double quote.\n          (cc == '\"'.charCodeAt(0) || cc == '\\''.charCodeAt(0))\n          ? escapeCssString(tok.substring(1, len - 1), escapeCssStrChar)\n          // A breaking ignorable token should is replaced with a single space.\n          : (cc == '/'.charCodeAt(0) && len > 1  // Comment.\n             || tok == '\\\\' || tok == CDC || tok == CDO || tok == '\\ufeff'\n             // Characters in W.\n             || cc <= ' '.charCodeAt(0))\n          ? ' '\n          // Make sure that all url(...)s are double quoted.\n          : /url\\(/i.test(tok)\n          ? 'url(' + escapeCssString(\n            tok.replace(URL_RE, ''),\n            escapeCssUrlChar)\n            + ')'\n          // Escapes in identifier like tokens will have been normalized above.\n          : tok;\n      // Merge adjacent space tokens.\n      if (last != tok || tok != ' ') {\n        tokens[j++] = last = tok;\n      }\n    }\n    tokens.length = j;\n    return tokens;\n  };\n})();\n\nexport {\n  lexCss,\n  decodeCss\n};\n"]}